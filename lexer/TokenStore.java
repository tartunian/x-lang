package lexer;
 
/**
 *  This file is automatically generated<br>
 *  it contains the table of mappings from token
 *  constants to their Symbols
*/
public class TokenStore {
  private static java.util.HashMap<TokenType,Symbol> tokens = new java.util.HashMap<TokenType,Symbol>();
  public static Symbol getSymbolByTokenType(TokenType type) { return tokens.get(type); }
  public TokenStore() {
  tokens.put(TokenType.Program, Symbol.put("program",TokenType.Program));
  tokens.put(TokenType.Int, Symbol.put("int",TokenType.Int));
  tokens.put(TokenType.BOOLean, Symbol.put("boolean",TokenType.BOOLean));
  tokens.put(TokenType.Char, Symbol.put("char",TokenType.Char));
  tokens.put(TokenType.CharLit, Symbol.put("<char>",TokenType.CharLit));
  tokens.put(TokenType.StringType, Symbol.put("string",TokenType.StringType));
  tokens.put(TokenType.StringLit, Symbol.put("<string>",TokenType.StringLit));
  tokens.put(TokenType.If, Symbol.put("if",TokenType.If));
  tokens.put(TokenType.Then, Symbol.put("then",TokenType.Then));
  tokens.put(TokenType.Else, Symbol.put("else",TokenType.Else));
  tokens.put(TokenType.Unless, Symbol.put("unless",TokenType.Unless));
  tokens.put(TokenType.Switch, Symbol.put("switch",TokenType.Switch));
  tokens.put(TokenType.Case, Symbol.put("case",TokenType.Case));
  tokens.put(TokenType.Colon, Symbol.put(":",TokenType.Colon));
  tokens.put(TokenType.Default, Symbol.put("default",TokenType.Default));
  tokens.put(TokenType.While, Symbol.put("while",TokenType.While));
  tokens.put(TokenType.Function, Symbol.put("function",TokenType.Function));
  tokens.put(TokenType.Return, Symbol.put("return",TokenType.Return));
  tokens.put(TokenType.Identifier, Symbol.put("<id>",TokenType.Identifier));
  tokens.put(TokenType.INTeger, Symbol.put("<int>",TokenType.INTeger));
  tokens.put(TokenType.LeftBrace, Symbol.put("{",TokenType.LeftBrace));
  tokens.put(TokenType.RightBrace, Symbol.put("}",TokenType.RightBrace));
  tokens.put(TokenType.LeftParen, Symbol.put("(",TokenType.LeftParen));
  tokens.put(TokenType.RightParen, Symbol.put(")",TokenType.RightParen));
  tokens.put(TokenType.Comma, Symbol.put(",",TokenType.Comma));
  tokens.put(TokenType.Assign, Symbol.put("=",TokenType.Assign));
  tokens.put(TokenType.Equal, Symbol.put("==",TokenType.Equal));
  tokens.put(TokenType.NotEqual, Symbol.put("!=",TokenType.NotEqual));
  tokens.put(TokenType.Greater, Symbol.put(">",TokenType.Greater));
  tokens.put(TokenType.GreaterEqual, Symbol.put(">=",TokenType.GreaterEqual));
  tokens.put(TokenType.Less, Symbol.put("<",TokenType.Less));
  tokens.put(TokenType.LessEqual, Symbol.put("<=",TokenType.LessEqual));
  tokens.put(TokenType.Plus, Symbol.put("+",TokenType.Plus));
  tokens.put(TokenType.Minus, Symbol.put("-",TokenType.Minus));
  tokens.put(TokenType.Or, Symbol.put("|",TokenType.Or));
  tokens.put(TokenType.And, Symbol.put("&",TokenType.And));
  tokens.put(TokenType.Multiply, Symbol.put("*",TokenType.Multiply));
  tokens.put(TokenType.Divide, Symbol.put("/",TokenType.Divide));
  tokens.put(TokenType.Comment, Symbol.put("//",TokenType.Comment));
  tokens.put(TokenType.EndProgram, Symbol.put("XD",TokenType.EndProgram));
   }
}
