package lexer;
 
/**
 *  This file is automatically generated<br>
 *  it contains the table of mappings from token
 *  constants to their Symbols
*/
public class TokenType {
   public static java.util.HashMap<Tokens,Symbol> tokens = new java.util.HashMap<Tokens,Symbol>();
   public TokenType() {
     tokens.put(Tokens.Program, Symbol.put("program",Tokens.Program));
     tokens.put(Tokens.Int, Symbol.put("int",Tokens.Int));
     tokens.put(Tokens.BOOLean, Symbol.put("boolean",Tokens.BOOLean));
     tokens.put(Tokens.Char, Symbol.put("char",Tokens.Char));
     tokens.put(Tokens.CharLit, Symbol.put("<char>",Tokens.CharLit));
     tokens.put(Tokens.StringType, Symbol.put("string",Tokens.StringType));
     tokens.put(Tokens.StringLit, Symbol.put("<string>",Tokens.StringLit));
     tokens.put(Tokens.If, Symbol.put("if",Tokens.If));
     tokens.put(Tokens.Then, Symbol.put("then",Tokens.Then));
     tokens.put(Tokens.Else, Symbol.put("else",Tokens.Else));
     tokens.put(Tokens.Switch, Symbol.put("switch",Tokens.Switch));
     tokens.put(Tokens.Case, Symbol.put("case",Tokens.Case));
     tokens.put(Tokens.Colon, Symbol.put(":",Tokens.Colon));
     tokens.put(Tokens.Default, Symbol.put("default",Tokens.Default));
     tokens.put(Tokens.While, Symbol.put("while",Tokens.While));
     tokens.put(Tokens.Function, Symbol.put("function",Tokens.Function));
     tokens.put(Tokens.Return, Symbol.put("return",Tokens.Return));
     tokens.put(Tokens.Identifier, Symbol.put("<id>",Tokens.Identifier));
     tokens.put(Tokens.INTeger, Symbol.put("<int>",Tokens.INTeger));
     tokens.put(Tokens.LeftBrace, Symbol.put("{",Tokens.LeftBrace));
     tokens.put(Tokens.RightBrace, Symbol.put("}",Tokens.RightBrace));
     tokens.put(Tokens.LeftParen, Symbol.put("(",Tokens.LeftParen));
     tokens.put(Tokens.RightParen, Symbol.put(")",Tokens.RightParen));
     tokens.put(Tokens.Comma, Symbol.put(",",Tokens.Comma));
     tokens.put(Tokens.Assign, Symbol.put("=",Tokens.Assign));
     tokens.put(Tokens.Equal, Symbol.put("==",Tokens.Equal));
     tokens.put(Tokens.NotEqual, Symbol.put("!=",Tokens.NotEqual));
     tokens.put(Tokens.Greater, Symbol.put(">",Tokens.Greater));
     tokens.put(Tokens.GreaterEqual, Symbol.put(">=",Tokens.GreaterEqual));
     tokens.put(Tokens.Less, Symbol.put("<",Tokens.Less));
     tokens.put(Tokens.LessEqual, Symbol.put("<=",Tokens.LessEqual));
     tokens.put(Tokens.Plus, Symbol.put("+",Tokens.Plus));
     tokens.put(Tokens.Minus, Symbol.put("-",Tokens.Minus));
     tokens.put(Tokens.Or, Symbol.put("|",Tokens.Or));
     tokens.put(Tokens.And, Symbol.put("&",Tokens.And));
     tokens.put(Tokens.Multiply, Symbol.put("*",Tokens.Multiply));
     tokens.put(Tokens.Divide, Symbol.put("/",Tokens.Divide));
     tokens.put(Tokens.Comment, Symbol.put("//",Tokens.Comment));
     tokens.put(Tokens.EndProgram, Symbol.put("XD",Tokens.EndProgram));
   }
}
